{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "No module named 'scipy'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-f68db1afc77c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0msklearn\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mPIL\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mImage\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mskimage\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mio\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mSKimg\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mE:\\anaconda\\condaAZ\\envs\\tensorflow\\lib\\site-packages\\sklearn\\__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     55\u001b[0m \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     56\u001b[0m     \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0m__check_build\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 57\u001b[1;33m     \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mbase\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mclone\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     58\u001b[0m     \u001b[0m__check_build\u001b[0m  \u001b[1;31m# avoid flakes unused variable error\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     59\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mE:\\anaconda\\condaAZ\\envs\\tensorflow\\lib\\site-packages\\sklearn\\base.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      9\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 10\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mscipy\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0msparse\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     11\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mexternals\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0msix\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     12\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[1;33m.\u001b[0m\u001b[0mutils\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfixes\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0msignature\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mImportError\u001b[0m: No module named 'scipy'"
     ]
    }
   ],
   "source": [
    "import sklearn\n",
    "from PIL import Image\n",
    "import skimage.io as SKimg\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.io as sio\n",
    "import pandas as pd\n",
    "\n",
    "import sys\n",
    "import ALLNeighborhoodrelationship as ABL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Tpan =SKimg.imread(\"F:/pythontestdata/MyTiff/tianhui1200pan.tif\")\n",
    "SKimg.imshow(Tpan)\n",
    "SKimg.show()\n",
    "Tpan.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#matlab文件名  groudTrue\n",
    "matfn='gt_tianhui1200.mat';\n",
    "data=sio.loadmat(matfn);\n",
    "mk = data['gt']\n",
    "print(mk)\n",
    "\n",
    "moban=mk*0.0;\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "im = Image.fromarray(mk);\n",
    "plt.imshow(im,cmap=plt.cm.get_cmap('cubehelix_r',7));\n",
    "cbar=plt.colorbar()\n",
    "cbar.set_ticks(np.linspace(0,7,8))\n",
    "cbar.set_ticklabels(('  ','water','grass','bulding','road','luodi','background'))\n",
    "plt.clim(-0.5,6.5)\n",
    "plt.title('GroundTruth');\n",
    "plt.show();\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Rows=Tpan.shape[0];  cols=Tpan.shape[1]; \n",
    "EarthGround=ABL.FivePixcel();\n",
    "NewMK=mk.reshape(1,mk.shape[0]*mk.shape[1]);\n",
    "\n",
    "ALLUvalue=np.unique(EarthGround,return_index=True,return_inverse=True,return_counts = True)[0];\n",
    "ALLUinverse=np.unique(EarthGround,return_index=True,return_inverse=True,return_counts = True)[2];\n",
    "\n",
    "LenthofALLunique=len(ALLUvalue);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ALLfinalF=[];\n",
    "for i in range(1,7):\n",
    "    TF=(NewMK==i);\n",
    "    TempMask=TF*EarthGround;\n",
    "    usefulValue=TempMask[TF];\n",
    "\n",
    "    Uvalue=np.unique(usefulValue,return_index=True,return_inverse=True,return_counts = True)[0];\n",
    "    Uinverse=np.unique(usefulValue,return_index=True,return_inverse=True,return_counts = True)[2];\n",
    "    Ufrence=(np.unique(usefulValue,return_index=True,return_inverse=True,return_counts = True)[3])/len(usefulValue);\n",
    "\n",
    "    fram1=pd.DataFrame({'id':ALLUvalue});\n",
    "    fram2=pd.DataFrame({'id':Uvalue,'F':Ufrence});\n",
    "   \n",
    "    MEge=pd.merge(fram1,fram2,on='id',how='outer');\n",
    "    \n",
    "    MegeFILL=MEge.fillna({'F':0.0});\n",
    "    \n",
    "    finalF=MegeFILL['F'];\n",
    "    \n",
    "    ALLfinalF.append(finalF);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "LastLabel=np.zeros(LenthofALLunique);\n",
    "\n",
    "for j in range(0,LenthofALLunique):\n",
    "    MAXP=0;   maxindex=0;\n",
    "    tempF=[ALLfinalF[0][j],ALLfinalF[1][j],ALLfinalF[2][j],ALLfinalF[3][j],ALLfinalF[4][j],ALLfinalF[5][j]];\n",
    "    for k in range(0,len(tempF)):\n",
    "        if(tempF[k]>MAXP):\n",
    "            MAXP=tempF[k]\n",
    "            maxindex=k+1;\n",
    "    LastLabel[j]=maxindex;\n",
    "\n",
    "\n",
    "NewLastLabe=LastLabel[ALLUinverse];\n",
    "import math\n",
    "finaLabel=mk-2;\n",
    "for HL in range(0,len(NewLastLabe)):\n",
    "    h=math.floor(HL/1200); l=HL%1200;\n",
    "    finaLabel[h][l]=NewLastLabe[HL];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 成图展示\n",
    "mylabel=finaLabel;\n",
    "print(mylabel)\n",
    "plt.figure(figsize=(6,6))\n",
    "im2 = Image.fromarray(mylabel);\n",
    "plt.imshow(im2,cmap=plt.cm.get_cmap('cubehelix_r',7));\n",
    "cbar=plt.colorbar()\n",
    "cbar.set_ticks(np.linspace(0,7,8))\n",
    "cbar.set_ticklabels(('  ','water','grass','bulding','road','luodi','background'))\n",
    "plt.clim(-0.5,6.5)\n",
    "plt.title('FiveNeiborHoodTruth');\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TrueOrFalse=(mylabel==mk)\n",
    "TrueValue=TrueOrFalse[TrueOrFalse>0]\n",
    "FalseValue=TrueOrFalse[TrueOrFalse==0]\n",
    "correct=len(TrueValue)/(len(TrueValue)+len(FalseValue));\n",
    "print(len(TrueValue));  print(len(FalseValue));  print(correct);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "TRUEplace=(mylabel==mk)*10000;\n",
    "FalsePlace=(mylabel!=mk)*10000;\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "imT = Image.fromarray(TRUEplace);\n",
    "plt.imshow(imT,cmap='Oranges');\n",
    "plt.title('Fivetrueplace');\n",
    "plt.show();\n",
    "\n",
    "plt.figure(figsize=(6,6))\n",
    "imF = Image.fromarray(FalsePlace);\n",
    "plt.imshow(imF,cmap='Reds');\n",
    "plt.title('falseplace');\n",
    "plt.show();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
